
// Code generated by oto; DO NOT EDIT.

package errors

import (
    "fmt"
    "runtime"
    "strings"
)


    

    

    
        const (
        
            
                NotFound string = "NotFound"
            
                BadRequest string = "BadRequest"
            
                Forbidden string = "Forbidden"
            
                Canceled string = "Canceled"
            
                Internal string = "Internal"
            
                Service string = "Service"
            
                Timeout string = "Timeout"
            
                Unauthorized string = "Unauthorized"
            
        
            
        
            
        
            
        
        )
    

    // Err is used to return error messages when something went wrong, it contains
// multiple types of errors, where only one of them can be populated.
type err struct {
        
            Code errCode `json:"code,omitempty"`
        
            Message string `json:"message,omitempty"`
        
            Fields []*errField `json:"fields,omitempty"`
        
            ServiceError *serviceError `json:"service_error,omitempty"`
        

        
            callers []string
            inner  error
            innerMost error
        
    }

    
           
        
            type errCode string
            
                func New(message string) error {
                    return &err{
                        Code: "Internal",
                        Message: string(message),
                        Fields: nil,
                        callers: getCallers(2),
                        inner: nil,
                        innerMost: nil,
                    } 
                }
            

            
                
                    func NewNotFound(message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(NotFound),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: nil,
                            innerMost: nil,
                            ServiceError: nil,
                        } 
                    }

                    func NewNotFoundWrapped(inner error, message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(NotFound),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: inner,
                            innerMost: InnerMost(inner),
                            ServiceError: nil,
                        } 
                    }
                
            
                
                    func NewBadRequest(message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(BadRequest),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: nil,
                            innerMost: nil,
                            ServiceError: nil,
                        } 
                    }

                    func NewBadRequestWrapped(inner error, message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(BadRequest),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: inner,
                            innerMost: InnerMost(inner),
                            ServiceError: nil,
                        } 
                    }
                
            
                
                    func NewForbidden(message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Forbidden),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: nil,
                            innerMost: nil,
                            ServiceError: nil,
                        } 
                    }

                    func NewForbiddenWrapped(inner error, message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Forbidden),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: inner,
                            innerMost: InnerMost(inner),
                            ServiceError: nil,
                        } 
                    }
                
            
                
                    func NewCanceled(message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Canceled),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: nil,
                            innerMost: nil,
                            ServiceError: nil,
                        } 
                    }

                    func NewCanceledWrapped(inner error, message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Canceled),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: inner,
                            innerMost: InnerMost(inner),
                            ServiceError: nil,
                        } 
                    }
                
            
                
                    func Wrap(inner error, message errMessage) error {
                        return &err{
                            Code: errCode(Internal),
                            Message: string(message),
                            Fields: nil,
                            callers: getCallers(2),
                            inner: inner,
                            ServiceError: nil,
                            innerMost: InnerMost(inner),
                        } 
                    }
                
            
                
                    func NewServiceError(message errMessage, serviceError serviceError) error { 
                        return &err{
                            Code: errCode(Service),
                            Message: string(message),
                            Fields: nil,
                            callers: getCallers(2),
                            inner: nil,
                            ServiceError: &serviceError,
                        } 
                    }

                    func NewServiceErrorWrapped(inner error, message errMessage, serviceError serviceError) error { 
                        return &err{
                            Code: errCode(Service),
                            Message: string(message),
                            Fields: nil,
                            callers: getCallers(2),
                            inner: inner,
                            ServiceError: &serviceError,
                            innerMost: InnerMost(inner),
                        } 
                    }
                
            
                
                    func NewTimeout(message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Timeout),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: nil,
                            innerMost: nil,
                            ServiceError: nil,
                        } 
                    }

                    func NewTimeoutWrapped(inner error, message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Timeout),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: inner,
                            innerMost: InnerMost(inner),
                            ServiceError: nil,
                        } 
                    }
                
            
                
                    func NewUnauthorized(message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Unauthorized),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: nil,
                            innerMost: nil,
                            ServiceError: nil,
                        } 
                    }

                    func NewUnauthorizedWrapped(inner error, message errMessage, fields ...*errField) error { 
                        return &err{
                            Code: errCode(Unauthorized),
                            Message: string(message),
                            Fields: fields,
                            callers: getCallers(2),
                            inner: inner,
                            innerMost: InnerMost(inner),
                            ServiceError: nil,
                        } 
                    }
                
            
        
    
           
        
    
           
        
    
        
            type serviceError string
           
        
    

    
        
            
                func IsNotFound(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(NotFound)
                }
            
                func IsBadRequest(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(BadRequest)
                }
            
                func IsForbidden(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(Forbidden)
                }
            
                func IsCanceled(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(Canceled)
                }
            
                func IsInternal(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(Internal)
                }
            
                func IsService(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(Service)
                }
            
                func IsTimeout(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(Timeout)
                }
            
                func IsUnauthorized(x error) bool {
                    underlying, ok := x.(*err)
                    if !ok {
                        return false
                    }
                    return underlying.Code == errCode(Unauthorized)
                }
            
        
            
        
            
        
            
        
    

    

    
        func FieldName(fieldName string) errFieldNameAndValue {
            return errFieldNameAndValue{
                Name: fieldName,
                Value: nil,
            } 
        }

        func (e errFieldNameAndValue) WithValue(v any) errFieldNameAndValue {
            e.Value = v
            return e
        }

        func (e errFieldNameAndValue) WithHint(hint string) errFieldNameAndValue {
            e.Hint = &hint
            return e
        }
    

    

    type errFieldNameAndValue struct {
        
            Name string `json:"name,omitempty"`
        
            Value any `json:"value,omitempty"`
        
            Hint *string `json:"-"`
        

        
    }

    
           
        
    
           
        
    
           
        
    

    

    
        type ErrFields []*errField

        func NewErrFields() *ErrFields { return &ErrFields{} }

        func ErrFieldsFrom(err error) *ErrFields {
            return err.(*ErrFields)
        }

        func IsErrFields(err error) bool {
            _, ok := err.(*ErrFields)
            return ok
        }

        func (f *ErrFields) NotEmpty() bool {
            return f != nil && len(*f) != 0
        }

        func (f *ErrFields) Add(field *errField) *ErrFields{
            if f == nil {
                f = &ErrFields{}
            }
            *f = append(*f, field)
            return f
        }

        func (f *ErrFields) Merge(err error) error {
            if !IsErrFields(err) {
				return err
			}

            fromFields := ErrFieldsFrom(err)

            for _, field := range *fromFields {
                f.Add(field)
            }

            return nil
        }

        func (f *ErrFields) Error() string {
            errStrings := []string{}
            for _, field := range *f {
                errNameAndValueStrings := []string{}
                for _, nameAndValue := range field.NamesAndValues {
                    errNameAndValueStrings = append(errNameAndValueStrings, fmt.Sprintf("%s %+v", nameAndValue.Name, nameAndValue.Value))
                }
                errStrings = append(errStrings, fmt.Sprintf("%s (%s)", field.Code, strings.Join(errNameAndValueStrings, ",")))
            }
            return strings.Join(errStrings, " - ")
        }
    

    

    

    // ErrField holds information about a field that caused an error
type errField struct {
        
            NamesAndValues []errFieldNameAndValue `json:"names_and_values,omitempty"`
        
            Code errFieldCode `json:"code,omitempty"`
        

        
    }

    
           
        
    
           
        
            type errFieldCode string
            

            
                
                    func FieldUnknown(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "Unknown",
                        } 
                    }

                    func (f *ErrFields) Unknown(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldUnknown(namesAndValues...))
                    }
                
            
                
                    func FieldAlreadyExists(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "AlreadyExists",
                        } 
                    }

                    func (f *ErrFields) AlreadyExists(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldAlreadyExists(namesAndValues...))
                    }
                
            
                
                    func FieldNotFound(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "NotFound",
                        } 
                    }

                    func (f *ErrFields) NotFound(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldNotFound(namesAndValues...))
                    }
                
            
                
                    func FieldInvalidValue(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "InvalidValue",
                        } 
                    }

                    func (f *ErrFields) InvalidValue(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldInvalidValue(namesAndValues...))
                    }
                
            
                
                    func FieldCannotBeUndefined(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "CannotBeUndefined",
                        } 
                    }

                    func (f *ErrFields) CannotBeUndefined(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldCannotBeUndefined(namesAndValues...))
                    }
                
            
                
                    func FieldCannotBeNull(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "CannotBeNull",
                        } 
                    }

                    func (f *ErrFields) CannotBeNull(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldCannotBeNull(namesAndValues...))
                    }
                
            
                
                    func FieldOnlyOneCanBeProvided(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "OnlyOneCanBeProvided",
                        } 
                    }

                    func (f *ErrFields) OnlyOneCanBeProvided(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldOnlyOneCanBeProvided(namesAndValues...))
                    }
                
            
                
                    func FieldAtLeastOneMustBeProvided(namesAndValues ...errFieldNameAndValue) *errField { 
                        return &errField{
                            NamesAndValues: namesAndValues,
                            Code: "AtLeastOneMustBeProvided",
                        } 
                    }

                    func (f *ErrFields) AtLeastOneMustBeProvided(namesAndValues ...errFieldNameAndValue) *ErrFields { 
                        return f.Add(FieldAtLeastOneMustBeProvided(namesAndValues...))
                    }
                
            
        
    

    


func (e *err) Error() string {
	errString := strings.Builder{}
	errString.WriteString(e.Message)

	if len(e.Fields) > 0 {
		errString.WriteString(" - [")
	}

	for i, field := range e.Fields {
		if i != 0 {
			errString.WriteString(", ")
		}

		fieldNamesAndValues := make([]string, len(field.NamesAndValues))
		for i := range field.NamesAndValues {
			fieldNamesAndValues[i] = "field:"+field.NamesAndValues[i].Name

			if field.NamesAndValues[i].Value != nil {
				fieldNamesAndValues[i] += "\tvalue:" + fmt.Sprintf("%+v", field.NamesAndValues[i].Value)
			}

			if field.NamesAndValues[i].Hint != nil {
				fieldNamesAndValues[i] += "\thint:" + *field.NamesAndValues[i].Hint
			}
		}

		errString.WriteString(string(field.Code))
		errString.WriteString(": (")
		errString.WriteString(strings.Join(fieldNamesAndValues, ", "))
		errString.WriteString(")")
	}

	if len(e.Fields) > 0 {
		errString.WriteString("]")
	}

	if e.inner != nil {
		errString.WriteString(", inner: (" + e.inner.Error() + ")")
	}

	if e.ServiceError != nil {
        errString.WriteString(", ServiceError: (" + string(*e.ServiceError) + ")")
    }

	return errString.String()
}

func From(x error) *err {
    if underlying, ok := x.(*err); ok {
        return underlying
    }

    return &err{
        Code:    "Internal",
        Message: string("unknown"),
        Fields:  nil,
        callers:  getCallers(4),
        inner:   x,
    }
}

func StackTrace(x error) string {
    underlying, ok := x.(*err)
    if !ok {
        return ""
    }

    stackTrace := strings.Builder{}
    stackTrace.WriteString(underlying.Message)
    stackTrace.WriteString(" ")
    stackTrace.WriteString(strings.Join(underlying.callers, "\n"))

    if underlying.inner != nil {
        stackTrace.WriteString("\n" + StackTrace(underlying.inner))
    }

    return stackTrace.String()
}

func getCallers(skip int) []string {
	var callers []string

	for i := skip; i < 10; i++ {
		_, file, line, ok := runtime.Caller(i)
		if !ok {
			break
		}

		callers = append(callers, fmt.Sprintf("%s:%d", file, line))
	}

    return callers
}

// returns the first error to occur (the last error in the inner error chain)
func InnerMost(x error) error {
	underlying, ok := x.(*err)
	if !ok {
		return x
	}
	return underlying.innerMost
}

type JSON err

func FromJSON(from *JSON) *err {
	return (*err)(from)
}

type errMessage string

// Interface guard
var _ error = (*err)(nil)
var _ error = (*ErrFields)(nil)
